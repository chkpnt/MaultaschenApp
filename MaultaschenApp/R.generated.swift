//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `aboutTabBarIcon`.
    static let aboutTabBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutTabBarIcon")
    /// Image `mealDetailsEditIcon`.
    static let mealDetailsEditIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mealDetailsEditIcon")
    /// Image `nearbyMealsTabBarIcon`.
    static let nearbyMealsTabBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearbyMealsTabBarIcon")
    /// Image `nearbyVenuesTabBarIcon`.
    static let nearbyVenuesTabBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearbyVenuesTabBarIcon")
    /// Image `no_image`.
    static let no_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_image")
    /// Image `overviewTabBarIcon`.
    static let overviewTabBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "overviewTabBarIcon")
    
    /// `UIImage(named: "aboutTabBarIcon", bundle: ..., traitCollection: ...)`
    static func aboutTabBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutTabBarIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mealDetailsEditIcon", bundle: ..., traitCollection: ...)`
    static func mealDetailsEditIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mealDetailsEditIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nearbyMealsTabBarIcon", bundle: ..., traitCollection: ...)`
    static func nearbyMealsTabBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearbyMealsTabBarIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nearbyVenuesTabBarIcon", bundle: ..., traitCollection: ...)`
    static func nearbyVenuesTabBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearbyVenuesTabBarIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_image", bundle: ..., traitCollection: ...)`
    static func no_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "overviewTabBarIcon", bundle: ..., traitCollection: ...)`
    static func overviewTabBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.overviewTabBarIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `MealCollectionViewCell`.
    static let mealCollectionViewCell = _R.nib._MealCollectionViewCell()
    /// Nib `TextTableViewCell`.
    static let textTableViewCell = _R.nib._TextTableViewCell()
    /// Nib `VenueCollectionViewCell`.
    static let venueCollectionViewCell = _R.nib._VenueCollectionViewCell()
    
    /// `UINib(name: "MealCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealCollectionViewCell) instead")
    static func mealCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealCollectionViewCell)
    }
    
    /// `UINib(name: "TextTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textTableViewCell) instead")
    static func textTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textTableViewCell)
    }
    
    /// `UINib(name: "VenueCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.venueCollectionViewCell) instead")
    static func venueCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.venueCollectionViewCell)
    }
    
    static func mealCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealCollectionViewCell? {
      return R.nib.mealCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealCollectionViewCell
    }
    
    static func textTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextTableViewCell? {
      return R.nib.textTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextTableViewCell
    }
    
    static func venueCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VenueCollectionViewCell? {
      return R.nib.venueCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VenueCollectionViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MealCollectionViewCell`.
    static let mealCollectionViewCell: Rswift.ReuseIdentifier<MealCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MealCollectionViewCell")
    /// Reuse identifier `VenueCollectionViewCell`.
    static let venueCollectionViewCell: Rswift.ReuseIdentifier<VenueCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "VenueCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `About`.
    static let about = _R.storyboard.about()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `SimpleFilter`.
    static let simpleFilter = _R.storyboard.simpleFilter()
    /// Storyboard `TextViewPopup`.
    static let textViewPopup = _R.storyboard.textViewPopup()
    
    /// `UIStoryboard(name: "About", bundle: ...)`
    static func about(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.about)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "SimpleFilter", bundle: ...)`
    static func simpleFilter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.simpleFilter)
    }
    
    /// `UIStoryboard(name: "TextViewPopup", bundle: ...)`
    static func textViewPopup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.textViewPopup)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.about` struct is generated, and contains static references to 5 localization keys.
    struct about {
      /// en translation: ... are always delicious!
      /// 
      /// Locales: en, de, fr
      static let subheader = Rswift.StringResource(key: "Subheader", tableName: "About", bundle: R.hostingBundle, locales: ["en", "de", "fr"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, de, fr
      static let tabBarItemTitle = Rswift.StringResource(key: "TabBarItemTitle", tableName: "About", bundle: R.hostingBundle, locales: ["en", "de", "fr"], comment: nil)
      /// en translation: Maultaschen
      /// 
      /// Locales: en, de, fr
      static let header = Rswift.StringResource(key: "Header", tableName: "About", bundle: R.hostingBundle, locales: ["en", "de", "fr"], comment: nil)
      /// en translation: Please give us 5 stars!
      /// 
      /// Locales: en, de, fr
      static let textOnReviewButton = Rswift.StringResource(key: "TextOnReviewButton", tableName: "About", bundle: R.hostingBundle, locales: ["en", "de", "fr"], comment: nil)
      /// en translation: Thanks for your review!
      /// 
      /// Locales: en, de, fr
      static let thanksForReview = Rswift.StringResource(key: "ThanksForReview", tableName: "About", bundle: R.hostingBundle, locales: ["en", "de", "fr"], comment: nil)
      
      /// en translation: ... are always delicious!
      /// 
      /// Locales: en, de, fr
      static func subheader(_: Void = ()) -> String {
        return NSLocalizedString("Subheader", tableName: "About", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en, de, fr
      static func tabBarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBarItemTitle", tableName: "About", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Maultaschen
      /// 
      /// Locales: en, de, fr
      static func header(_: Void = ()) -> String {
        return NSLocalizedString("Header", tableName: "About", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please give us 5 stars!
      /// 
      /// Locales: en, de, fr
      static func textOnReviewButton(_: Void = ()) -> String {
        return NSLocalizedString("TextOnReviewButton", tableName: "About", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thanks for your review!
      /// 
      /// Locales: en, de, fr
      static func thanksForReview(_: Void = ()) -> String {
        return NSLocalizedString("ThanksForReview", tableName: "About", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.mealDetails` struct is generated, and contains static references to 0 localization keys.
    struct mealDetails {
      fileprivate init() {}
    }
    
    /// This `R.string.nearbyMeals` struct is generated, and contains static references to 1 localization keys.
    struct nearbyMeals {
      /// en translation: Meals!
      /// 
      /// Locales: en, de, fr
      static let tabBarItemTitle = Rswift.StringResource(key: "TabBarItemTitle", tableName: "NearbyMeals", bundle: R.hostingBundle, locales: ["en", "de", "fr"], comment: nil)
      
      /// en translation: Meals!
      /// 
      /// Locales: en, de, fr
      static func tabBarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("TabBarItemTitle", tableName: "NearbyMeals", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _VenueCollectionViewCell.validate()
    }
    
    struct _MealCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MealCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MealCollectionViewCell"
      let name = "MealCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TextTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _VenueCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VenueCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "VenueCollectionViewCell"
      let name = "VenueCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VenueCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VenueCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "no_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_image' is used in nib 'VenueCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try about.validate()
      try launchScreen.validate()
      try simpleFilter.validate()
      try textViewPopup.validate()
    }
    
    struct about: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutViewController = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutViewController")
      let bundle = R.hostingBundle
      let name = "About"
      
      func aboutViewController(_: Void = ()) -> AboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.about().aboutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutViewController' could not be loaded from storyboard 'About' as 'AboutViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct simpleFilter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SimpleFilter"
      let simpleFilterViewController = StoryboardViewControllerResource<SimpleFilterViewController>(identifier: "SimpleFilterViewController")
      
      func simpleFilterViewController(_: Void = ()) -> SimpleFilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: simpleFilterViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.simpleFilter().simpleFilterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'simpleFilterViewController' could not be loaded from storyboard 'SimpleFilter' as 'SimpleFilterViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct textViewPopup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TextViewPopup"
      let textViewPopupViewController = StoryboardViewControllerResource<TextViewPopupViewController>(identifier: "TextViewPopupViewController")
      
      func textViewPopupViewController(_: Void = ()) -> TextViewPopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: textViewPopupViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.textViewPopup().textViewPopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'textViewPopupViewController' could not be loaded from storyboard 'TextViewPopup' as 'TextViewPopupViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
